{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bmaim\\\\OneDrive\\\\Documents\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport { minutesToDuration } from \"../utils/duration/index\";\nimport SessionInformation from \"../pomodoro/SessionInformation\";\nimport DurationSetting from \"../pomodoro/DurationSetting\";\nimport ControlPanel from \"../pomodoro/ControlPanel\";\nconst BREAK_MAX = 15;\nconst BREAK_MIN = 1;\nconst BREAK_STEP = 1;\nconst FOCUS_MAX = 60;\nconst FOCUS_MIN = 5;\nconst FOCUS_STEP = 5; // These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  const elapsedSeconds = prevState.timeTotal - timeRemaining;\n  return { ...prevState,\n    timeRemaining,\n    percentComplete: elapsedSeconds / prevState.timeTotal * 100\n  };\n}\n\nfunction nextSession(focusDuration, breakDuration) {\n  return currentSession => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        duration: minutesToDuration(breakDuration),\n        timeTotal: breakDuration * 60,\n        timeRemaining: breakDuration * 60,\n        percentComplete: 0\n      };\n    }\n\n    return {\n      label: \"Focusing\",\n      duration: minutesToDuration(focusDuration),\n      timeTotal: focusDuration * 60,\n      timeRemaining: focusDuration * 60,\n      percentComplete: 0\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n  const [session, setSession] = useState(null);\n\n  function playPause() {\n    setIsTimerRunning(prevState => {\n      const nextState = !prevState;\n\n      if (nextState) {\n        setSession(prevStateSesssion => {\n          if (prevStateSesssion === null) {\n            return {\n              label: \"Focusing\",\n              duration: minutesToDuration(focusDuration),\n              timeTotal: focusDuration * 60,\n              timeRemaining: focusDuration * 60,\n              percentComplete: 0\n            };\n          }\n\n          return prevStateSesssion;\n        });\n      }\n\n      return nextState;\n    });\n  }\n\n  function decreaseFocus() {\n    setFocusDuration(prevState => Math.max(FOCUS_MIN, prevState - FOCUS_STEP));\n  }\n\n  function increaseFocus() {\n    setFocusDuration(prevState => Math.min(FOCUS_MAX, prevState + FOCUS_STEP));\n  }\n\n  function decreaseBreak() {\n    setBreakDuration(prevState => Math.max(BREAK_MIN, prevState - BREAK_STEP));\n  }\n\n  function increaseBreak() {\n    setBreakDuration(prevState => Math.min(BREAK_MAX, prevState + BREAK_STEP));\n  }\n\n  function stopSession() {\n    setIsTimerRunning(false);\n    setSession(null);\n  } // useInterval(\n  //   () => {\n  //     // ToDo: Implement what should happen when the timer is running\n  //     if (session.timeRemaining === 0) {\n  //       new Audio(\n  //         `${process.env.PUBLIC_URL}/alarm/submarine-dive-horn.mp3`\n  //       ).play();\n  //         return setSession(nextSession(focusDuration, breakDuration));\n  //     }\n  //     return setSession(nextTick);\n  //   },\n  //   isTimerRunning ? 1000 : null\n  // );\n\n\n  useInterval(() => {\n    // ToDo: Implement what should happen when the timer is running\n    if (isTimerRunning) {\n      //decrease active counter by 1sec per sec\n      setActiveTime(currentTime => currentTime - 1);\n\n      if (activeTime <= 0) {\n        if (focusOrBreak) {\n          new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1482.mp3`).play();\n          adjustActiveTime(breakTime);\n          setFocusOrBreak(!focusOrBreak);\n        } else {\n          adjustActiveTime(focusTime);\n          setFocusOrBreak(!focusOrBreak);\n        }\n      }\n\n      setCompletedPercentage(currentPercentage => {\n        //find what percentage we are completed by\n        currentPercentage = ((1 - activeTime / ((focusOrBreak ? focusTime : breakTime) * 60)) * 100).toFixed(2); //format completed percentage\n\n        setFormatedPercentage(currentPercentage);\n      });\n      console.log(formatedPercentage);\n    }\n  }, isTimerRunning ? 1000 : null);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DurationSetting, {\n    label: `Focus Duration: ${minutesToDuration(focusDuration)}`,\n    onDecrease: decreaseFocus,\n    onIncrease: increaseFocus,\n    testid: \"focus\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"float-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(DurationSetting, {\n    label: `Break Duration: ${minutesToDuration(breakDuration)}`,\n    onDecrease: decreaseBreak,\n    onIncrease: increaseBreak,\n    testid: \"break\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ControlPanel, {\n    onPlayPause: playPause,\n    isPlaying: isTimerRunning,\n    onStop: stopSession,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(SessionInformation, {\n    session: session,\n    isPaused: !isTimerRunning,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["C:/Users/bmaim/OneDrive/Documents/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","useInterval","minutesToDuration","SessionInformation","DurationSetting","ControlPanel","BREAK_MAX","BREAK_MIN","BREAK_STEP","FOCUS_MAX","FOCUS_MIN","FOCUS_STEP","nextTick","prevState","timeRemaining","Math","max","elapsedSeconds","timeTotal","percentComplete","nextSession","focusDuration","breakDuration","currentSession","label","duration","Pomodoro","isTimerRunning","setIsTimerRunning","setFocusDuration","setBreakDuration","session","setSession","playPause","nextState","prevStateSesssion","decreaseFocus","increaseFocus","min","decreaseBreak","increaseBreak","stopSession","setActiveTime","currentTime","activeTime","focusOrBreak","Audio","play","adjustActiveTime","breakTime","setFocusOrBreak","focusTime","setCompletedPercentage","currentPercentage","toFixed","setFormatedPercentage","console","log","formatedPercentage"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport { minutesToDuration } from \"../utils/duration/index\";\nimport SessionInformation from \"../pomodoro/SessionInformation\";\nimport DurationSetting from \"../pomodoro/DurationSetting\";\nimport ControlPanel from \"../pomodoro/ControlPanel\";\n\nconst BREAK_MAX = 15;\nconst BREAK_MIN = 1;\nconst BREAK_STEP = 1;\nconst FOCUS_MAX = 60;\nconst FOCUS_MIN = 5;\nconst FOCUS_STEP = 5;\n\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  const elapsedSeconds = prevState.timeTotal - timeRemaining;\n  return {\n    ...prevState,\n    timeRemaining,\n    percentComplete: (elapsedSeconds / prevState.timeTotal) * 100,\n  };\n}\n\nfunction nextSession(focusDuration, breakDuration) {\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        duration: minutesToDuration(breakDuration),\n        timeTotal: breakDuration * 60,\n        timeRemaining: breakDuration * 60,\n        percentComplete: 0,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      duration: minutesToDuration(focusDuration),\n      timeTotal: focusDuration * 60,\n      timeRemaining: focusDuration * 60,\n      percentComplete: 0,\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n  const [session, setSession] = useState(null);\n\n  function playPause() {\n    setIsTimerRunning((prevState) => {\n      const nextState = !prevState;\n\n      if (nextState) {\n        setSession((prevStateSesssion) => {\n          if (prevStateSesssion === null) {\n            return {\n              label: \"Focusing\",\n              duration: minutesToDuration(focusDuration),\n              timeTotal: focusDuration * 60,\n              timeRemaining: focusDuration * 60,\n              percentComplete: 0,\n            };\n          }\n          return prevStateSesssion;\n        });\n      }\n      return nextState;\n    });\n  }\n\n  function decreaseFocus() {\n    setFocusDuration((prevState) =>\n      Math.max(FOCUS_MIN, prevState - FOCUS_STEP)\n    );\n  }\n\n  function increaseFocus() {\n    setFocusDuration((prevState) =>\n      Math.min(FOCUS_MAX, prevState + FOCUS_STEP)\n    );\n  }\n\n  function decreaseBreak() {\n    setBreakDuration((prevState) =>\n      Math.max(BREAK_MIN, prevState - BREAK_STEP)\n    );\n  }\n\n  function increaseBreak() {\n    setBreakDuration((prevState) =>\n      Math.min(BREAK_MAX, prevState + BREAK_STEP)\n    );\n  }\n\n  function stopSession() {\n    setIsTimerRunning(false);\n    setSession(null);\n  }\n\n  // useInterval(\n  //   () => {\n  //     // ToDo: Implement what should happen when the timer is running\n  //     if (session.timeRemaining === 0) {\n  //       new Audio(\n  //         `${process.env.PUBLIC_URL}/alarm/submarine-dive-horn.mp3`\n  //       ).play();\n  //         return setSession(nextSession(focusDuration, breakDuration));\n  //     }\n  //     return setSession(nextTick);\n  //   },\n  //   isTimerRunning ? 1000 : null\n  // );\n  useInterval(\n    () => {\n      // ToDo: Implement what should happen when the timer is running\n\t  if(isTimerRunning){\n\t\t  //decrease active counter by 1sec per sec\n\t\t  setActiveTime((currentTime) => currentTime-1)\n\t\t  if(activeTime <=0){\n\t\t\t  if(focusOrBreak){\n\t\t\t\tnew Audio(`https://bigsoundbank.com/UPLOAD/mp3/1482.mp3`).play();\n\t\t\t\tadjustActiveTime(breakTime)\n\t\t\t\tsetFocusOrBreak(!focusOrBreak)\n\t\t\t  }else{\n\t\t\t\t  adjustActiveTime(focusTime)\n\t\t\t\t  setFocusOrBreak(!focusOrBreak)\n\t\t\t  }\n\t\t  }\n\t\t  \n\t\t  setCompletedPercentage((currentPercentage) => {\n\t\t\t\t//find what percentage we are completed by\n\t\t\t\tcurrentPercentage = ((1-(activeTime/ ((focusOrBreak ? focusTime : breakTime)*60))) *100).toFixed(2)\n\t\t\t\t//format completed percentage\n\t\t\t\tsetFormatedPercentage(currentPercentage)\n\t\t\t});\n\t\t\tconsole.log(formatedPercentage)\n\t  }\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <DurationSetting\n            label={`Focus Duration: ${minutesToDuration(focusDuration)}`}\n            onDecrease={decreaseFocus}\n            onIncrease={increaseFocus}\n            testid=\"focus\"\n          />\n        </div>\n        <div className=\"col\">\n          <div className=\"float-right\">\n            <DurationSetting\n              label={`Break Duration: ${minutesToDuration(breakDuration)}`}\n              onDecrease={decreaseBreak}\n              onIncrease={increaseBreak}\n              testid=\"break\"\n            />\n          </div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <ControlPanel\n            onPlayPause={playPause}\n            isPlaying={isTimerRunning}\n            onStop={stopSession}\n          />\n        </div>\n      </div>\n      <SessionInformation session={session} isPaused={!isTimerRunning} />\n    </div>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}